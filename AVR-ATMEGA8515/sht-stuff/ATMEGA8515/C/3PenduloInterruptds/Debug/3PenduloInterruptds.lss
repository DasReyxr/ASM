
3PenduloInterruptds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000130  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000130  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ac  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000503  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f6  00000000  00000000  00000d07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001000  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000398  00000000  00000000  00001094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000109  00000000  00000000  0000142c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001535  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	3f c0       	rjmp	.+126    	; 0x82 <__vector_1>
   4:	59 c0       	rjmp	.+178    	; 0xb8 <__vector_2>
   6:	20 c0       	rjmp	.+64     	; 0x48 <__bad_interrupt>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
   a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
   e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
  18:	17 c0       	rjmp	.+46     	; 0x48 <__bad_interrupt>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
  1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
  20:	13 c0       	rjmp	.+38     	; 0x48 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e0 e3       	ldi	r30, 0x30	; 48
  36:	f1 e0       	ldi	r31, 0x01	; 1
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a2 36       	cpi	r26, 0x62	; 98
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>
  44:	58 d0       	rcall	.+176    	; 0xf6 <main>
  46:	72 c0       	rjmp	.+228    	; 0x12c <_exit>

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <_Z13dynamic_delayi>:
#include <util/delay.h>
#include <avr/interrupt.h>

// --------- Function ---------
void dynamic_delay(int ms) {
	for (int i = 0; i < ms; i++) {
  4a:	18 16       	cp	r1, r24
  4c:	19 06       	cpc	r1, r25
  4e:	6c f4       	brge	.+26     	; 0x6a <_Z13dynamic_delayi+0x20>
  50:	20 e0       	ldi	r18, 0x00	; 0
  52:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  54:	ef e9       	ldi	r30, 0x9F	; 159
  56:	ff e0       	ldi	r31, 0x0F	; 15
  58:	31 97       	sbiw	r30, 0x01	; 1
  5a:	f1 f7       	brne	.-4      	; 0x58 <_Z13dynamic_delayi+0xe>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <_Z13dynamic_delayi+0x14>
  5e:	00 00       	nop
  60:	2f 5f       	subi	r18, 0xFF	; 255
  62:	3f 4f       	sbci	r19, 0xFF	; 255
  64:	82 17       	cp	r24, r18
  66:	93 07       	cpc	r25, r19
  68:	a9 f7       	brne	.-22     	; 0x54 <_Z13dynamic_delayi+0xa>
  6a:	08 95       	ret

0000006c <_Z17Config_Interruptsv>:
// -- Pin/out --
#define S1 PC0 
int time = 10;

void Config_Interrupts(void){
	    MCUCR |= (1 << ISC01) | (1 << ISC11);  // Falling edge triggers for INT0 and INT1
  6c:	85 b7       	in	r24, 0x35	; 53
  6e:	8a 60       	ori	r24, 0x0A	; 10
  70:	85 bf       	out	0x35, r24	; 53
	    MCUCR &= ~((1 << ISC00) | (1 << ISC10));
  72:	85 b7       	in	r24, 0x35	; 53
  74:	8a 7f       	andi	r24, 0xFA	; 250
  76:	85 bf       	out	0x35, r24	; 53

	    GICR |= (1 << INT0) | (1 << INT1);     // Enable INT0 and INT1
  78:	8b b7       	in	r24, 0x3b	; 59
  7a:	80 6c       	ori	r24, 0xC0	; 192
  7c:	8b bf       	out	0x3b, r24	; 59
	    sei();                                 // Enable global interrupts
  7e:	78 94       	sei
  80:	08 95       	ret

00000082 <__vector_1>:

}
ISR(INT0_vect) {
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	8f 93       	push	r24
  8e:	9f 93       	push	r25
	if (time > -1) {
  90:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  94:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  98:	99 23       	and	r25, r25
  9a:	2c f0       	brlt	.+10     	; 0xa6 <__vector_1+0x24>
		time -= 10;  // Decrease delay by 20ms
  9c:	0a 97       	sbiw	r24, 0x0a	; 10
  9e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	PORTC = 0x02;
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	85 bb       	out	0x15, r24	; 21
	/*
	_delay_ms(100);
	PORTC = 0x00;
*/
}
  aa:	9f 91       	pop	r25
  ac:	8f 91       	pop	r24
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <__vector_2>:



ISR(INT1_vect) {
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	2f 93       	push	r18
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
	if (time < 1000) {
  c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  cc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d0:	88 3e       	cpi	r24, 0xE8	; 232
  d2:	23 e0       	ldi	r18, 0x03	; 3
  d4:	92 07       	cpc	r25, r18
  d6:	2c f4       	brge	.+10     	; 0xe2 <__vector_2+0x2a>
		time += 10;  // Increase delay by 50ms
  d8:	0a 96       	adiw	r24, 0x0a	; 10
  da:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  de:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	PORTC = 0x01;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	85 bb       	out	0x15, r24	; 21
	/*
	;
	_delay_ms(100);
	PORTC = 0x00;
*/
	}
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	2f 91       	pop	r18
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <main>:

// ----------- Main -----------
int main(void) {
	// Configure PB1 and PB2 as input

    DDRD &= ~((1 << PD2) | (1 << PD3));  // Set PD2 and PD3 as inputs
  f6:	81 b3       	in	r24, 0x11	; 17
  f8:	83 7f       	andi	r24, 0xF3	; 243
  fa:	81 bb       	out	0x11, r24	; 17
    PORTD |= (1 << PD2) | (1 << PD3);    // Enable pull-up resistors
  fc:	82 b3       	in	r24, 0x12	; 18
  fe:	8c 60       	ori	r24, 0x0C	; 12
 100:	82 bb       	out	0x12, r24	; 18

	DDRC  = 0x01;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 106:	15 ba       	out	0x15, r1	; 21
	DDRA  = 0xFF; 
 108:	9f ef       	ldi	r25, 0xFF	; 255
 10a:	9a bb       	out	0x1a, r25	; 26
	PORTA = 0x01;  
 10c:	8b bb       	out	0x1b, r24	; 27

	Config_Interrupts();
 10e:	ae df       	rcall	.-164    	; 0x6c <_Z17Config_Interruptsv>
		dynamic_delay(time);
		
		PORTA <<= 1;

		if (PORTA == 0x80)
			PORTA = 0x01;
 110:	c1 e0       	ldi	r28, 0x01	; 1
	DDRA  = 0xFF; 
	PORTA = 0x01;  

	Config_Interrupts();
	while (1) {
		dynamic_delay(time);
 112:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 116:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 11a:	97 df       	rcall	.-210    	; 0x4a <_Z13dynamic_delayi>
		
		PORTA <<= 1;
 11c:	8b b3       	in	r24, 0x1b	; 27
 11e:	88 0f       	add	r24, r24
 120:	8b bb       	out	0x1b, r24	; 27

		if (PORTA == 0x80)
 122:	8b b3       	in	r24, 0x1b	; 27
 124:	80 38       	cpi	r24, 0x80	; 128
 126:	a9 f7       	brne	.-22     	; 0x112 <main+0x1c>
			PORTA = 0x01;
 128:	cb bb       	out	0x1b, r28	; 27
 12a:	f3 cf       	rjmp	.-26     	; 0x112 <main+0x1c>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
